const { Renouvellement, AttributionNumero } = require("../../models");

const RenouvellementController = {
  // üîπ Cr√©er un renouvellement
  async createRenouvellement(req, res) {
    try {
      const { attribution_id, decision_renouvellement, date_renouvellement } =
        req.body;

      // V√©rifier si l'attribution existe
      const attribution = await AttributionNumero.findByPk(attribution_id);
      if (!attribution) {
        return res
          .status(404)
          .json({ success: false, message: "Attribution non trouv√©e" });
      }

      // V√©rifier si l'attribution a une dur√©e d'utilisation d√©finie
      if (!attribution.duree_utilisation) {
        return res.status(400).json({
          success: false,
          message: "La dur√©e d'utilisation de l'attribution est requise"
        });
      }

      // V√©rifier si l'attribution est expir√©e
      const currentDate = new Date(); // Date actuelle
      const expirationDate = new Date(attribution.date_expiration); // Date d'expiration de l'attribution

      // Si la date d'expiration n'est pas encore pass√©e, l'attribution ne peut pas √™tre renouvel√©e
      if (expirationDate >= currentDate) {
        return res.status(400).json({
          success: false,
          message:
            "L'attribution n'est pas expir√©e et ne peut pas √™tre renouvel√©e."
        });
      }

      // Calculer la date d'expiration du renouvellement
      let dateExpiration = new Date(date_renouvellement);
      dateExpiration.setMonth(
        dateExpiration.getMonth() + attribution.duree_utilisation
      ); // Ajoute la dur√©e √† la date de renouvellement

      // Cr√©er le renouvellement avec la date d'expiration calcul√©e
      const renouvellement = await Renouvellement.create({
        attribution_id,
        decision_renouvellement,
        date_renouvellement,
        date_expiration_renouvellement: dateExpiration
      });

      // Mettre √† jour l'attribution en d√©finissant 'etat_autorisation' sur true
      await attribution.update({
        etat_autorisation: true,
        date_expiration: dateExpiration // Mettre √† jour la date d'expiration de l'attribution
      });

      return res.status(201).json({
        success: true,
        message: "Renouvellement cr√©√© avec succ√®s",
        renouvellement
      });
    } catch (error) {
      console.error(error);
      return res
        .status(500)
        .json({ success: false, message: "Erreur serveur" });
    }
  },

  // üîπ Obtenir tous les renouvellements
  async getAllRenouvellements(req, res) {
    try {
      const renouvellements = await Renouvellement.findAll({
        include: { model: AttributionNumero } // Inclure l'attribution associ√©e
      });

      return res.status(200).json({ success: true, renouvellements });
    } catch (error) {
      console.error(error);
      return res
        .status(500)
        .json({ success: false, message: "Erreur serveur" });
    }
  },

  // üîπ Obtenir un renouvellement par ID
  async getRenouvellementById(req, res) {
    try {
      const { id } = req.params;

      const renouvellement = await Renouvellement.findByPk(id, {
        include: { model: AttributionNumero, as: "attribution" }
      });

      if (!renouvellement) {
        return res
          .status(404)
          .json({ success: false, message: "Renouvellement non trouv√©" });
      }

      return res.status(200).json({ success: true, renouvellement });
    } catch (error) {
      console.error(error);
      return res
        .status(500)
        .json({ success: false, message: "Erreur serveur" });
    }
  },

  // üîπ Mettre √† jour un renouvellement
  async updateRenouvellement(req, res) {
    try {
      const { id } = req.params;
      const {
        decision_renouvellement,
        date_renouvellement,
        date_attribution_renouvellement
      } = req.body;

      const renouvellement = await Renouvellement.findByPk(id);
      if (!renouvellement) {
        return res
          .status(404)
          .json({ success: false, message: "Renouvellement non trouv√©" });
      }

      // Mettre √† jour les champs
      await renouvellement.update({
        decision_renouvellement,
        date_renouvellement,
        date_attribution_renouvellement
      });

      return res.status(200).json({
        success: true,
        message: "Renouvellement mis √† jour avec succ√®s",
        renouvellement
      });
    } catch (error) {
      console.error(error);
      return res
        .status(500)
        .json({ success: false, message: "Erreur serveur" });
    }
  },

  // üîπ Supprimer un renouvellement
  async deleteRenouvellement(req, res) {
    try {
      const { id } = req.params;

      const renouvellement = await Renouvellement.findByPk(id);
      if (!renouvellement) {
        return res
          .status(404)
          .json({ success: false, message: "Renouvellement non trouv√©" });
      }

      await renouvellement.destroy();

      return res.status(200).json({
        success: true,
        message: "Renouvellement supprim√© avec succ√®s"
      });
    } catch (error) {
      console.error(error);
      return res
        .status(500)
        .json({ success: false, message: "Erreur serveur" });
    }
  }
};

module.exports = RenouvellementController;
